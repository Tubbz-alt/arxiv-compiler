apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: "{{ .Values.namespace }}"
  name: compiler
  labels:
    subsystem: "{{ .Values.labels.subsystem }}"
    service-group: "{{ .Values.labels.service_group }}"

---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: "{{ default "compiler" .Values.deployment.name }}"
  namespace: "{{ .Values.namespace }}"
  labels:
    subsystem: "{{ .Values.labels.subsystem }}"
    container: "{{ default "compiler" .Values.deployment.name }}"
    service-group: "{{ .Values.labels.service_group }}"
    log-style: uwsgi
spec:
  replicas: 1
  template:
    metadata:
      labels:
        subsystem: "{{ .Values.labels.subsystem }}"
        container: "{{ default "compiler" .Values.deployment.name }}"
        service-group: "{{ .Values.labels.service_group }}"
        log-style: uwsgi
      annotations:
        prometheus.io/scrape: 'true'
    spec:
      serviceAccount: compiler
      volumes:
      - name: vault-token
        emptyDir: {}
      - name: vault-certificate
        secret:
          secretName: vault-certificate
      containers:
      - name: "{{ default "compiler" .Values.deployment.name }}"
        image: arxiv/compiler:{{ .Values.image.tag }}
        imagePullPolicy: Always
        volumeMounts:
        - name: vault-token
          mountPath: /etc/vault
        - name: vault-certificate
          mountPath: /etc/vault-certificate
          readOnly: true
        ports:
        - containerPort: 8000
        resources:
          limits:
            cpu: 300m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        env:
        - name: CELERY_BROKER_URL
          value: "{{ .Values.redis.url }}"
        - name: CELERY_RESULT_BACKEND
          value: "{{ .Values.redis.url }}"
        - name: VAULT_HOST
          value: "{{ .Values.vault.host }}"
        - name: VAULT_PORT
          value: "{{ .Values.vault.port }}"
        - name: VAULT_CERT
          value: /etc/vault-certificate/vaulttls.cert.pem
        - name: VAULT_ROLE
          value: "{{ .Values.vault.role }}-{{ .Values.namespace }}"
        - name: VAULT_CREDENTIAL
          value: "{{ .Values.vault.credential }}-{{ .Values.namespace }}"
        - name: S3_SUBMISSION_BUCKET
          value: "{{ .Values.s3.submission.bucket }}-{{ .Values.namespace }}"
        - name: KUBE_TOKEN
          value: /var/run/secrets/kubernetes.io/serviceaccount/token


# ---
# apiVersion: apps/v1beta1
# kind: Deployment
# metadata:
#   name: "{{ default "compiler" .Values.deployment.name }}-worker"
#   namespace: "{{ .Values.namespace }}"
#   labels:
#     subsystem: "{{ .Values.labels.subsystem }}"
#     container: "{{ default "compiler" .Values.deployment.name }}-worker"
#     service-group: backend
#     log-style: celery
# spec:
#   replicas: 1
#   template:
#     metadata:
#       labels:
#         subsystem: "{{ .Values.labels.subsystem }}"
#         container: "{{ default "compiler" .Values.deployment.name }}-worker"
#         service-group: "{{ .Values.labels.service_group }}"
#         log-style: celery
#       annotations:
#         prometheus.io/scrape: 'true'
#     spec:
#       serviceAccount: compiler
#       volumes:
#       - name: vault-token
#         emptyDir: {}
#       - name: docker-graph-storage
#         emptyDir: {}
#       - name: run
#         emptyDir: {}
#
#       initContainers:
#       - name: pull-converter
#         image: docker:18.09.2-dind
#         command:
#           - "sh"
#           - "-c"
#           - >
#             dockerd & sleep 10; docker pull arxivvanity/engrafo; exit
#         resources:
#           requests:
#             memory: "512Mi"
#             cpu: "500m"
#           limits:
#             memory: "3Gi"
#             cpu: "2"
#         securityContext:
#           privileged: true
#         volumeMounts:
#         - name: docker-graph-storage
#           mountPath: /var/lib/docker
#
#       containers:
#       - name: dind-daemon
#         image: docker:18.09.2-dind
#         resources:
#           requests:
#             memory: "512Mi"
#             cpu: "500m"
#           limits:
#             memory: "1Gi"
#             cpu: "1"
#         securityContext:
#           privileged: true
#         volumeMounts:
#         - name: docker-graph-storage
#           mountPath: /var/lib/docker
#
#       - name: arxiv-compiler-worker
#         image: arxiv/compiler:{{ .Values.image.tag }}
#         imagePullPolicy: Always
#         ports:
#         - containerPort: 8000
#         resources:
#           limits:
#             cpu: 300m
#             memory: 256Mi
#           requests:
#             cpu: 100m
#             memory: 128Mi
#         volumeMounts:
#         - name: vault-token
#           mountPath: /etc/vault
#         - name: run
#           mountPath: /var/run/celery
#         command:
#           - "sh"
#           - "-c"
#           - >
#             while true; do
#               KUBE_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token);
#               curl -k --request POST --data '{"jwt": "'"$KUBE_TOKEN"'", "role": "'"$VAULT_ROLE"'"}' https://$VAULT_HOST:$VAULT_PORT/v1/auth/kubernetes/login | jq -j '.auth.client_token' > /etc/vault/token;
#               X_VAULT_TOKEN=$(cat /etc/vault/token);
#               $(eval "curl -k -H \"X-Vault-Token: $X_VAULT_TOKEN\" https://$VAULT_HOST:$VAULT_PORT/v1/aws/creds/$VAULT_CREDENTIAL | jq -r '.data | \"export AWS_ACCESS_KEY_ID=\(.access_key)\nexport AWS_SECRET_ACCESS_KEY=\(.secret_key)\"'");
#               if [ ! -f /var/run/celery/worker.pid ]; then celery multi start 1 -A arxiv_html -l debug -E -c4 --logfile=%p.log --pidfile=/var/run/celery/worker.pid; else celery multi restart 1 -l debug -E --logfile=%p.log --pidfile=/var/run/celery/worker.pid; fi;
#               sleep 72764795;
#             done
#         env:
#         - name: CELERY_BROKER_URL
#           value: "{{ .Values.redis.url }}"
#         - name: CELERY_RESULT_BACKEND
#           value: "{{ .Values.redis.url }}"
#         - name: VAULT_HOST
#           value: "{{ .Values.vault.host }}"
#         - name: VAULT_PORT
#           value: "{{ .Values.vault.port }}"
#         - name: VAULT_ROLE
#           value: "{{ .Values.vault.role }}"
#         - name: S3_SUBMISSION_BUCKET
#           value: "{{ .Values.s3.submission.bucket }}"
#         - name: DOCKER_HOST
#           value: tcp://localhost:2375
